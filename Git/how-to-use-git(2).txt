1. commit option

    (1) git commit -am "[커밋 명]" 
        1) -am 옵션은 untracked 상태의 파일은 커밋하지 않는다, add가 완료된 상태의 파일만 커밋한다.
        2) 원래는 git add, git commit -m 을 따로 해줘야한다.

    (2) amned : 커밋 메세지 바꾸기
        1) git commit --amend -m "work 5 수정" : 커밋 내용을 실수 했을 때 새로 커밋하는 옵션, 자세한 내용은 추가로 알아보기
        2) commit id가 변경된다. 전버전의 commit id를 찾으면 언제든지 다시 돌아갈 수 있다.
        3) git은 언제든지 모든 내용을 저장한다는 사실을 알 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

2. commit id

    (1) SHA1 : 단방향 암호 시스템
        1) 어떤 글자, 용량의 파일을 넣어도 40여 글자 암호로 변환된다.
        2) 같은 내용을 넣는다면 sha1을 이용해 생성한 암호는 똑같다. 어떠한 내용이라도 수정된다면 commit id가 달라지는 것이다.
        3) 4) 처음의 commit id를 변경한다면, 그 이후의 모든 commit id도 동시에 모두 바뀐다.

--------------------------------------------------------------------------------------------------------------------------------------

3. log

    (1) git log --online : head를 추적하기 때문에 head, master에 관련된 commit만 보인다
    (2) git log --online --all : branch까지 볼 수 있다.

    --------------------------------------------------------------------------------------------------------------------------------------

4. merge

    (1) git merge [병합될 커밋이름]
        1) add, commit 명령어가 자동 실행된다.
        2) master를 branch에 병합하는건지, branch를 master에 병합하는 건지 헷갈리지 않도록 조심한다.
        3) Merge branch 'master' into exp
        4) master가 exp를 병합할거면, git checkout master, git merge exp
            4-1) head가 위치한 exp에서 git merge master를 하면 마스터에 병합되고, checkout master를 하지않고 계속 작업한다면 head->exp는 자식 commit을 계속 진행한다.
            4-2) 이후 checkout master를 하여 git merge exp를 진행한다면 만들어논 실험적인 exp를 적용한 master 커밋을 얻을 수 있다. 
            4-3) 실험적인 것은 exp에서 진행하고, 필요할 때 이를 master에 병합하든지, 필요하지 않다면 병합하지 않거나 branch를 지우면 된다.
        5) 새로운 commit의 부모 commit은 master, exp 둘 다이다.
        6) 병합 후에 branch를 지우는 방법은 '-D'이다
            6-1) git branch -D exp

    (2) 똑같은 파일을 서로 다른 branch에서 작업하고 병합한다면 어떻게 될까?

--------------------------------------------------------------------------------------------------------------------------------------

5. push : 배포
    (1) 내 컴퓨터에서 작업한 내용을 잃어버리면 어떻게 할까?
        1) 물리적으로 떨어진 컴퓨터의 주소를 안다면, push하면 작업내용이 다른 컴퓨터로 이동할 수 있다.
