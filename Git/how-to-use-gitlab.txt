1. Git Issue란?

    (1) 이슈 : 오류, 버그 및 새로운 기능, 작업요청, 사소한 질문이나 의견 등 제품에 관해 회사에서 대화의 대상이 되는 거의 모든 것

    (2) issue는 왜 남길까?

        1) 요리와 같이 개발에 있어 수많은 일이 발생한다, 이러한 일의 해결을 위해 이슈를 남긴다.(협업)

        2) 제목, 내용, 주요 변경사항, 댓글로 이루어진다.

    (3) 이슈 등록하기
    
        1) 프로젝트 생성

        2) issues 탭 클릭 - new issue 생성 - title, description 작성

    (4) Markdown 작성법 : gitalb은 GitLab Flavored Markdown(GFM)을 지원한다.

        1) 제목 : #의 개수로 표시(h1~h6까지 표현 가능)

    (5) issue Label : hash tag, 글의 목적을 쉽게 파악할 수 있다.

        1) 카테고리, 난이도, 중요도, 이슈 구분, 발생위치, 발생 OS 등 필요한 요소에 맞추어 약속하여 사용한다.

        2) 자주 사용되는 Label의 종류

            2-1) 타입 - 버그, 기능개선, 신기능, 논의사항...

            2-2) (진행)상태 - New, In Progress, In Review, Done...

            2-3) 카테고리 - Front-end, Back-end, UI...

    (6) 팀원과 이슈를 공유하는 방법(1) : issue Template, Web Hook

        1) 이슈 유형별 Template을 만들어 사용하면 편리하다.

            1-1) .gitlab/issue_templates/bug_templates.md (마크다운 파일 작성해두기)

        2) 이벤트가 발생하면, 다른 곳으로 알림을 준다.

            2-1) slack : gitlab-notifications 설치 - add apps - incomming webhooks 설치
                https://docs.gitlab.com/ee/user/profile/notifications.html

            2-2) 채널을 선택하고, url을 복사해서 gitlab - slack notifications 옵션에서 설정하기

    (7) issue와 board의 관계

        1) board에서 issue의 진행 상태별로 볼 수 있다.

        2) board를 추가해서, 새로운 상태 리스트를 만들어 사용할 수 있다.(bug, 기능 개선 등)

    (8) Milestones(마일스톤) : 목표

        1) 보통 버전을 마일스톤으로 사용한다.

        2) title, description, start date, due date를 설정한다.

        3) new issue 생성 시 Milestones을 설정하고, Label을 설정한다

        4) issue를 할당하고, close 할 때마다 Milestones의 진행률이 올라간다.

        5) 프로젝트 이슈를 관리하기 위해 사용한다.

        6) 이슈를 Milestone로 묶을 수 있다.

        7) Milestone을 사용하면 Issue들의 진척도를 확인하기 수월해진다.

--------------------------------------------------------------------------------------------------------------------------------------

2. MR(Merge Request)란?

    (1) MR : 다른 branch의 변경 사항을 반영하기 위한 요청

        1) 새로운 코드를 추가하여 branch에 반영(병합/merge)하고자 합니다. merge를 Request합니다.

        2) 코드를 반영하기 전에 검수 과정을 거치는 것.

    (2) MR을 하는 이유

        1) 장점
            차의 구성품 : 차체, 바퀴, 에어컨, ...
            master branch of car : 차체 branch + 바퀴 branch + 에어컨 branch + 네이게이션 branch + ...
            
            1) 코드리뷰

            2) master branch의 안정성 유지

            3) 보안 : 사람에 의한 해킹 방지(코드리뷰를 하고 반영시키기 때문에)

        2) 설정 : 최고 Approver 수와 특정 사람의 승인을 Merge 조건으로 걸 수 있다.

    (3) Merge Request 실습

        1) 원격 저장소에서 지역 저장소로 clone
        
        2) git pull 후 새로운 작업을 위한 branch 생성(v1.5)

        3) 수정 사항 작성 후 git add " ", git commit -m " ", git push --set-upsteam origin v1.5

        4) 원격 저장소(gitlab의 해당 프로젝트)에서 MR 탭 - new merge Request 생성

        5) source branch와 target branch 설정, branch 비교하고 진행하기 클릭

        6) title, description 등 설정을 변경하고, Submit merge Request 클릭 -> v1.5라는 MR이 생성된다.

        7) 해당 MR에 대해서 코드를 확인하고, merge 버튼을 누르면 master branch에 변경사항이 반영된다.

    (4) 실제 프로젝트에 MR을 적용하기(issue와 연동)

        1) bug와 관련된 새로운 issue 발생

        2) '해당 issue의 상세보기 하단에 create merge Request 버튼'을 확인할 수 있다.

            2-1) 이슈에서 branch를 생성하여, branch merge Request 허용시 자동적으로 이슈를 해결하는 방법에서 가장 중요한 부분이다.

        3) create merge Request and branch : 수정 후 MR을 보낸 후에도, merge가 승인될 때까지 수정한 모든 사항이 반영된다.
            이 때 생성된 branch에서 계속 작업을 해도 되는 것이다.

        4) MR 생성 후 생성된 branch(bug)를 로컬 저장소에서 연다.
            git pull
            git checkout bug

        5) 수정사항 작성 후 push한다.
            git add .
            git commit -m
            git push --set-upstream origin bug

        6) 원격 저장소에 merge Request에 들어가 merge를 허용한다.

        7) issue에 들어가보면 해당 bug issue가 자동적으로 closed 되어있는 것을 확인할 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

3. CI란? (CI/CD)

    (1) CI : Continuos Integration (자동으로 빌드-테스트-머지를 수행하는 기능)

        1) 등장배경 : 기술의 발전에 따라 프로젝트에 많은 분업이 필요해졌다. 협업의 중요성 증가! 
                        하나의 코드에도 안정성이 중요해졌다.

        2) 새로운 코드에 대한 변경사항이 꾸준히 자동으로 빌드 및 테스트 되어 
            여러 개발자가 동시에 작업할 때 인터럽트가 발생하는 것을 방지할 수 있다.

        3) 중요한 이유 : 프로젝트는 여러 기능이 긴밀하게 연결되어 있다. 한가지 기능에 문제가 생기면 연쇄적으로 문제가 생길 가능성이 커진다.
                        빌드나 테스트는 매번 하는 것이 중요하다. 한 달에 한번씩 모여서 하는 것 같이 비효율적으로 하면 안된다.
                        자주 할수록 좋지만, 시간이 많이 걸리는 테스트를 gitlab에서 대신 해준다. -> CI Pipelines

        4) 장점

            4-1) 테스트-빌드-배포를 자동으로 해주어 코드 작성에만 집중할 수 있다.
            4-2) 코드 작성 이외의 시간을 절약할 수 있다.
            4-3) 분업과 협업을 효율적으로 할 수 있다.

        5) gitlab의 CI 기능의 구성/설정들이 포함된 파일명 : .gitlab-ci.yml

    (2) CI하지 않고 빌드하기(테스트, 배포) : CI유무 차이 비교

        1) CI/CD가 없을 때 : 개발자가 코드 작성/빌드/테스트/배포의 모든 과정을 수행해야 한다. (실습하지말기)

            1-1) nodejs 설치 - npm install express(모듈다운), npm install --save-dev mocha should supertest(테스트용)
            1-2) app.js 수정 module.exports = app;, heroku로 배포 테스트
            1-3) test.spec.js 작성
            1-4) npm test : https response 작동 여부 확인, 다양한 테스트 케이스가 추가될 것이다.
            1-5) heroku 계정 생성, npm install -g heroku / heroku login / heroku create / git push heroku master
            1-6) 배포 확인하기
            1-7) 이러한 모든 과정이 시간이 소요된다.

        2) CI/CD가 있을 때 : 개발자가 코드만 작성하고, gitlab이 빌드/테스트/배포의 과정을 수행한다.

    (3) CI로 자동화 시키기

        1) gitlab과 연동한 지역저장소 폴더에  .gitlab-ci.yml 파일 생성
            
            image: node:latest #가장 최근의 노드 이미지 활용

            stages :
            -test #테스트 기능을 거친다

            cache:
            paths:
                -node_modules/

            testing: #테스트라는 단계를 거치고, 테스트가 진행될 때는 관련 스크립트를 실행
            stage : test
            script :
                - npm install
                - npm test

        2) git pull, git all, git commit, git push 후 gitlab CI/CD 탭에서 Pipelines를 확인할 수 있다.

        3) stage

            3-1) 앞 스테이지가 끝나야 다음 스테이지가 실행된다.
            3-2) 단계별로 실행될 스크립트를 자유롭게 설정할 수 있다.(실행될 스크립트를 stage단위로 나눔)
            3-3) 특정 branch에서만 실행되도록 설정할 수 있다. (only 옵션 사용)
                only :
                    master
            3-4) stage는 원하는대로 추가가 가능하며 test, build, deploy 외에도 다양하게 추가할 수 있다.

        4) MR에 CI를 연동하는 방법 : 프로젝트의 MR 설정에서 Pipeline이 성공되어야 하게 설정한다.
            gitlab의 프로젝트 설정 중에는 Pipeline이 pass되어야만 merge가 가능하게 설정해주는 기능이 있다.
            이를 이용하여 테스트/빌드가 실패한 경우에는 MR을 merge할 수 없도록 구성할 수 있다.

    (4) CD : Continuos Deploy

        1) stage : bulid - test - deploy는 단계별로 실행을 마쳐야 다음 단계를 실행할 수 있다.

        2) API key가 필요하다. gitlab - settings - CI/CI - variables - API key, APP production 설정(heroku에서 받아오기)

--------------------------------------------------------------------------------------------------------------------------------------

4. 알쓸깃잡(gitlab wiki and member)

    (1) wiki : 프로젝트에 대한 설명/안내를 문서로 Markdown으로 작성해 관리할 수 있는 기능
        
        1) project의 wiki 탭으로 이동

        2) create new wiki - Markdown문법을 활용하여 새 페이지 작성, [이름](링크 타이틀명)으로 여러 페이지를 오가는 기능을 구현할 수 있다.

    (2) Member 권한과 접근

        1) Groups : 프로젝트와, 프로젝트에 속한 팀원을 관리하기 위한 기능
            1-1) 서브그룹, 프로젝트는 상위 멤버를 상속한다.
            1-2) 그룹을 한 번에 초대하면 권한이 max access level을 넘지 못하도록 설정할 수 있다.
            1-3) 그룹 아래에 추가적으로 서브그룹 생성이 가능하다.

        2) 멤버 권한 설정

            2-1) 멤버 이름 혹은 이메일 주소 설정
            2-2) role permission 설정 : Owner, maintainer, developer, guest 등(read more 버튼으 로 상세 권한 확인 가능)
            2-3) Access expiration date 설정
            2-4) max access level : 프론트 1팀에 프론트 2팀을 초대하려고 할 때, 
                                    2팀에 developer보다 높은 계급의 사람이 있더라도, developer이상의 권한을 가질 수 없다,

        3) 그룹 생성 후 그룹에 프로젝트 추가하기 : 프로젝트 멤버가 그룹 멤버를 상속받는다.

            3-1) subgroup도 설정 가능 - 개발팀 - 백엔드팀 - 서버팀 : 상위 그룹 멤버를 상속받는다.
            3-2) 프로젝트 생성 시 그룹단위로 초대가 가능하다

    (3) Lint의 중요성 : 기술부채 방지

        1) 문자가 될 소지가 있는 자잘한 문제점들을 찾아주는 기능(함수 한 줄로 작성 등과 같이)

            1-1) ''와 "" 등의 방식을 통일
            1-2) 누락된 ; 찾아주기
            1-3) 선언됐지만 사용되지 않은 변수 찾아주기
            1-4) 사용되었지만 선언되지 않은 변수 찾아주기

        2) 당장 프로그램에서 문제가 되는 것은 아니지만, 문제가 쌓이면 기술부채가 발생한다. (중요도는 높지만, 당장 해결하지 않아도 되는 문제)

        3) CI stage에서 test 앞에 lint를 확인할 수 있다. 

        4) npm install --save-dev eslint # 설치
            ./node_modules/.bin/eslint --init # lint 설정
            ./node_modules/.bin/eslint . # 실행

    (4) 통계(Analytics)

        1) 확인할 수 있는 정보
            1-1) MR이 생성되고 merge/close 되기까지 걸린 평균 시간
            1-2) 커밋별 CI/CD에 걸린 시간
            1-3) CI/CD 실행 추세 및 pass 된 수 
            등

        2) 다양한 통계에 대해선 차후 확인해보기

    (5) Operations
        1) Metrics : 서버의 시간별 메모리 사용량 등이 저장된다.
        2) Environments : staging server(여러개) + production server, 여러 환경을 관리하기 위해 사용된다.(각 환경 버전 관리)
        3) Error Tracking : sentry.io(대표적인 서비스)를 gitlab에 연동하여 error를 트래킹하기 쉽게 만들 수 있다.
        4) Feature Flags : 특정 기능에 문제가 생겼다면, 해당 기능을 on/off 할 수 있도록 한다.
    
