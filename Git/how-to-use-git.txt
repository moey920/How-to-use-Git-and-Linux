* 익숙해지고 이해될 때까지, 남에게 설명할 수 있을 때까지 학습해야한다.(모든 학습에 있어서)

Git 버전 관리 시스템

1. 본질적인 의미
    1) commit : 내가 작업한 것을 제출한다.
        1-1) commit message : 버전을 업데이트 할 때, 어떤 변경점이 발생했는지 명시적으로 표현한다.
        1-2) history : 이전 버전과, 현재 버전이 어떤 차이가 있는지 보여준다(빨간줄:삭제사항, 초록줄:수정사항)
        1-3) 각 버전은 버전이 만들어진 시점의 snapshot을 가지고 있다. 어떤 파일만 존재했는지 저장된다.

    2) 대박난 IT기술은 개발자가 사용하면서 그 효과를 입증하여 일반인에게 알려진 기술이다
        2-1) git, email 등등

    3) Dropbox 프로그램
        3-1) Dropbox 클라이언트를 설치한다. 수정내용을 저장한다
        3-2) 작업내용을 저장하면, Dropbox.com 서버에 저장된다. 각 버전이 git처럼 저장된다.
        3-3) 프로젝트가 간단하다면 Dropbox라도 써야한다. 안쓰는 개발자가 문제가 된다.
        3-4) 컴퓨터는 언제 고장날지 모르지만, 반드시 고장난다. 버전 관리가 되지 않으면 반드시 문제가 생긴다.
        3-5) 파일을 생성하면 자동으로 버전이 생성된다 -> 백업 이상의 의미가 없다.
        3-6) git, gitlab (dropbox, dropbox.com)

    4) 그럼에도 불구하고 git을 쓰는 이유
        4-1) 작업의 시작과 끝을 작업자가 명확하게 명시하기 때문에, 각 버전이 의미를 가진 백업이 된다.
    
    5) 버전관리를 하는 본질적인 이유
        5-1) 디버깅!! 디버깅을 해야 의미가 있다.

2. git 사용 방법
    1) GUI(Graphical user interface) 사용방식(클릭, 터치)

    2) CLI(Command line interface) 사용방식 (명령어)
        2-1) CLI로 사용하는 것이 오리지널 git이다, 지식을 교환하기 좋다
        2-2) 첫 상태는 무조건 상태확인! (현재 위치 확인) : pwd(print working directory)
        2-3) ls : 리스트, 현재 디렉토리의 파일 리스트를 보여준다.
            * 옵션들(기본적인 행위를 바꿔줌)
            ls -l : 파일의 자세한 옵션을 출력한다.
            ls -l -a : 숨김 파일까지 출력한다.
        2-4) touch test.txt : touch는 빈 파일을 생성한다.
        2-5) git : 사용설명서가 출력된다
        2-6) cd : change directory 폴더 이동
        2-7) mkdir : make directory 폴더 생성
        2-8) init : git으로 버전 관리를 시작하는 명령어 ex) git1 폴더에서 git init 입력 시 .git이 생성된다.
        2-9) 마이그레이션 : 이주, .git을 압축하여 보내면 모든 버전이 이동하기 때문에 완벽한 백업이 가능하다.

    3) 내 컴퓨터에서 사용하기
        3-1) Visual Studio Code에서 폴더에 접근 후 터미널 실행
        3-2) bash 혹은 select default shell에서 git bash 선택(https://git-scm.com/download/win) - 먼저 git이 설치되어 있어야한다.
