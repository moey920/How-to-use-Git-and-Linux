1. commit option

    (1) git commit -am "[커밋 명]" 
        1) -am 옵션은 untracked 상태의 파일은 커밋하지 않는다, add가 완료된 상태의 파일만 커밋한다.
        2) 원래는 git add, git commit -m 을 따로 해줘야한다.

    (2) amned : 커밋 메세지 바꾸기
        1) git commit --amend -m "work 5 수정" : 커밋 내용을 실수 했을 때 새로 커밋하는 옵션, 자세한 내용은 추가로 알아보기
        2) commit id가 변경된다. 전버전의 commit id를 찾으면 언제든지 다시 돌아갈 수 있다.
        3) git은 언제든지 모든 내용을 저장한다는 사실을 알 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

2. commit id

    (1) SHA1 : 단방향 암호 시스템
        1) 어떤 글자, 용량의 파일을 넣어도 40여 글자 암호로 변환된다.
        2) 같은 내용을 넣는다면 sha1을 이용해 생성한 암호는 똑같다. 어떠한 내용이라도 수정된다면 commit id가 달라지는 것이다.
        3) 4) 처음의 commit id를 변경한다면, 그 이후의 모든 commit id도 동시에 모두 바뀐다.

--------------------------------------------------------------------------------------------------------------------------------------

3. log

    (1) git log --online : head를 추적하기 때문에 head, master에 관련된 commit만 보인다
    (2) git log --online --all : branch까지 볼 수 있다.

    --------------------------------------------------------------------------------------------------------------------------------------

4. merge

    (1) git merge [병합될 커밋이름]
        1) add, commit 명령어가 자동 실행된다.
        2) master를 branch에 병합하는건지, branch를 master에 병합하는 건지 헷갈리지 않도록 조심한다.
        3) Merge branch 'master' into exp
        4) master가 exp를 병합할거면, git checkout master, git merge exp
            4-1) head가 위치한 exp에서 git merge master를 하면 마스터에 병합되고, checkout master를 하지않고 계속 작업한다면 head->exp는 자식 commit을 계속 진행한다.
            4-2) 이후 checkout master를 하여 git merge exp를 진행한다면 만들어논 실험적인 exp를 적용한 master 커밋을 얻을 수 있다. 
            4-3) 실험적인 것은 exp에서 진행하고, 필요할 때 이를 master에 병합하든지, 필요하지 않다면 병합하지 않거나 branch를 지우면 된다.
        5) 새로운 commit의 부모 commit은 master, exp 둘 다이다.
        6) 병합 후에 branch를 지우는 방법은 '-D'이다
            6-1) git branch -D exp

    (2) 똑같은 파일을 서로 다른 branch에서 작업하고 병합한다면 어떻게 될까?

--------------------------------------------------------------------------------------------------------------------------------------

5. push : 배포
    (1) 내 컴퓨터에서 작업한 내용을 잃어버리면 어떻게 할까?
        1) 물리적으로 떨어진 컴퓨터의 주소를 안다면, push하면 작업내용이 다른 컴퓨터로 이동할 수 있다.

    (2) 연습하기
        1) local, remote 폴더를 만들고, VSC로 연다.
        
        2) add folder to workspace 옵션을 클릭하여 하나의 workspace안에 local과 remote 폴더가 들어가도록 한다.

        3) 터미널을 열고, local의 터미널 경로를 설정한다.
            3-1) moey9@LAPTOP-PFOK2RFI MINGW64 ~/OneDrive/Desktop/local
            3-2) local에 work.txt를 생성하고 git add work.txt, git commit -am "work 1"

        4) 터미널을 열고, 2.bash로 remote 터미널 경로를 설정한다.
            4-1) 이렇게 하지말고, 터미널을 split하여 cd .., cd remote로 이동해도 된다.
            4-2) git init --bare를 입력하면 .git 내에 있던 파일이 밖으로 나오면서 생성된다. (workdir가 존재하지 않는 저장소)
            4-3) 원격 directory를 만들 땐, workdirectory를 생성하지 않는 --bare 옵션을 쓴다.
            4-4) 사람이 작업하지 못하도록 --bare 옵션을 사용하는 것이다. 오직 백업용으로 사용한다.
            4-5) git은 분산버전관리 시스템이기 때문에 지역저장소와 원격저장소는 똑같은 시스템이다.

        5) local 터미널에 원격 저장소의 위치를 설정한다.(원격 저장소의 별명도 설정)
            5-1) git remote add origin ../remote
            5-3) git remote -v 로 원격 저장소를 확인할 수 있다.(git remote : 리모트 목록 보여줌, git branch : 브런치 목록만 보여줌)

        6) git push --set-upstream origin master : 푸쉬를 하는데, 오리진의 master branch에 upstream하겠다.(페어링)
            6-1) git log를 보면 e860a4a (HEAD -> master, origin/master) work 1과 같이 내용이 변경된다.
            6-2) git graph를 보면 master와 origin이 붙어있는 것을 볼 수 있다.
            6-3) local/.git/config를 확인하면 아래와 같다.
                [remote "origin"]
                    url = ../remote
                    fetch = +refs/heads/*:refs/remotes/origin/*
                [branch "master"]
                    remote = origin
                    merge = refs/heads/master

        7) 지역 저장소만 새로운 commit을 진행한다면? push하지 않은 커밋이 있음을 확인할 수 있다.
            7-1) $git status
                    On branch master
                    Your branch is ahead of 'origin/master' by 
                    1 commit.
            7-2) 이미 한번 페어링 했기 때문에, push만 하면된다.(git push)
                git commit -am "work 3"; git push : 지역저장소에서 수정 내용을 커밋하고, 원격 저장소에 백업한다.

        8) 별도의 컴퓨터에 네트워크를 연결해서 원격 저장소를 만드는 법 : git remote repository service(github, gitlab..)

        9) 네트워크의 원격 저장소의 주소와, 홈페이지 주소는 다르다.
            https://kdt-gitlab.elice.io/Rohharam/remote_repo.git

        10) Push an existing folder : 이미 존재하는 폴더로 push
            cd existing_folder
            git init
            git remote add origin https://kdt-gitlab.elice.io/Rohharam/remote_repo.git
            git add .
            git commit -m "Initial commit"
            git push -u origin master
            10-1) VCS로 새로운 폴더를 열고, 위와 같이 진행하여 네트워크 상의(gitlab) 원격 저장소를 연결시키고 push한다.
                To https://kdt-gitlab.elice.io/Rohharam/remote_repo.git
                * [new branch]      master -> master
                Branch 'master' set up to track remote branch 'master' from 'origin'.
            11-1) SSH keygen으로 진행하는 방법도 있다.
                SSH, HTTPS는 네트워크 연결 방식을 지칭한다.
                SSH keygen 생성 후, cat ~/.ssh/id_rsa.pub로 내용을 확인, 복사한 후
                gitlab, github의 계정 정보에 키 값(패스워드)를 등록한 후 위와 같은 방식으로 원격 저장소를 연결하여 push한다.

--------------------------------------------------------------------------------------------------------------------------------------

6. pull = git fetch + git merge
    
    (1) 사용예시
        1) 회사에서 작업하다, 원격 저장소에 push를 하고, 자택에서 이어서 작업을 하고 싶다면 원격 저장소에서 pull을 받아온다.
        2) 작업 완료 후 원격 저장소에 push를 하고, 익일 회사에서 pull을 한다.
        3) 이렇게 장소의 변화가 아닌, 개발자끼리의 코드 공유도 push와 pull을 이용하여 가능하다.
    
    (2) 사용방법
        1) 새로운 저장소에 $git clone [원격저장소 주소] 
            $ git clone https://kdt-gitlab.elice.io/Rohharam/remote_repo.git . (뒤에 .은 현재 위치에 clone 하겠다는 의미)

    (3) 동시에 푸쉬하는 경우 오류
        1) A와 B가 동시에 푸쉬하려고 할 때, A가 먼저 push 명령을 시행했다면, 
            commit id가 갱신되기 때문에 B는 또 다른 commit을 가르키기 위해 먼저 fetch과 merge를 하고, 다시 push 해야한다.
    
    (4) origin/master : Romote Tracking Branch
        gitlab,hub 등의 기계에서 관리하는 자동 관리 branch이다.
        $git merge origin/master

    (5) 이러한 과정을 git pull 로 진행할 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

7. 같은 파일을 서로 다른 개발자가 수정했을 때 생기는 일(conflict 문제)

    (1) 서로 다른 파일을 수정하면 merge만 잘하면 정상적으로 작동하낟.

    (2) 서로 같은 파일을 수정하면, 서로 다른 부분은 수정된 부분으로 병합된다.

    (3) 서로 같은 파일을 수정할 때, 서로 같은 부분은 사용자에게 병합할 때 물어본다.

    (4) left    base   right   merge_no_base    merge_with_base
        1       1       1           1                   1
        L2      2       2           ?                   L2
        3       3       R3          ?                   R3
        L4      4       R4          ?                   ?(사람이 해야함)
                                    1/4자동병합         3/4자동병합

--------------------------------------------------------------------------------------------------------------------------------------

8. git의 다양한 특징

    (1) SVN(SubVersion)과 git의 차이
        1) git은 SVN과 달리 각 개발자가 중앙 집중된 서버 저장소와 독립된 상태로 작업할 수 있다.

    (2) git은 Working Directory(작업 영역), Staging Area(준비 영역), Repository(저장소) 세 영역으로 나뉜다.
        1) git의 영역에 포함되지 않은 Standing Kernle(커널 영역)이란? 운영체제와 사용자간의 터널 역할(터미널 등)

    (3) 깃 버전과 초기설정
        1) 깃 버전 확인
            $ git --version
                git version 2.30.0.windows.1
        2) 깃 사용시 유저정보를 컴퓨터 전체에 저장(비밀번호는 필요할 때마다 입력해야한다.)
            $ git config --global user.name " "
            $ git config --global user.email " "
            --global을 사용하지 않으면 저장소마다 다르게 적용 가능하다.
        3) 설정 정보 확인
            $ git config --list
                diff.astextplain.textconv=astextplain    
                filter.lfs.clean=git-lfs clean -- %f     
                filter.lfs.smudge=git-lfs smudge -- %f   
                filter.lfs.process=git-lfs filter-process
                filter.lfs.required=true
                http.sslbackend=openssl
                http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
                core.autocrlf=true
                core.fscache=true
                core.symlinks=false
                pull.rebase=false
                credential.helper=manager-core
                credential.https://dev.azure.com.usehttppath=true
                init.defaultbranch=master
                user.email=moey920@naver.com
                user.name=rohharam
                alias.l=log --oneline --all --decorate --graph
                core.editor=code --wait
                core.repositoryformatversion=0
                core.filemode=false
                core.bare=false
                core.logallrefupdates=true
                core.symlinks=false
                core.ignorecase=true
                remote.origin.url=https://kdt-gitlab.elice.io/Rohharam/remote_repo.git
                remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
                branch.master.remote=origin
                branch.master.merge=refs/heads/master

