1. Git Branch : 독립적으로 어떤 작업을 진행하기 위한 개념, 각각의 Branch는 다른 Branch의 영향을 받지 않음

    (1) Git Branch 종류

        1) main Branch : 배포할 수 있는 수준의 안정적인 Branch

        2) topic Branch : 기능 추가나 버그 수정과 같은 단위 작업을 위한 Branch

    (2) Branch 생성 : $git branch [branch id]

        1) master branch : 기본 branch
    
    (3) Branch 전환

        1) 현재 branch 확인 : $git branch

        2) checkout [branch id] : HEAD가 해당 branch로 이동한다.

        3) Git Navigation : checkout은 branch를 전환하는데 사용할 수 도 있고 
                            아래와 같이 git log 로 확인한 snapshot을 넘나들때도 사용이 가능
                            git checkout [snapshot hash(16진수)]

                            $ git log --pretty=oneline
                            e4abb6f... (HEAD -> master) this is master
                            d97d387... another snapshot
                            $ git checkout d97d38
                            ...
                            HEAD is now at d97d38 another snapshot
                            $ git log --pretty=oneline
                            e4abb6f... (master) this is master
                            d97d387... (HEAD) another snapshot
                            이렇게 snapshot의 hash값을 이용하여 과거의 파일 내용을 확인 할 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

2. fast forward

    (1) like_feature(예) Branch의 working directory에서 새로운 정보를 넣어 commit

        1) git checkout like_feature로 branch를 이동하고 새로운 commit을 진행하면 HEAD->like_feature가 master와 다른 체크포인트를 만든다.

--------------------------------------------------------------------------------------------------------------------------------------

3. Merge(병합) : like_feature에서 작업을 마친후 master branch로 통합하기

    (1) master로 이동하여 like_feature를 병합하기(fast forward의 경우)
    
        1) master를 중심으로 병합된다. like_feature의 내용이 이동한 master 내부로 모두 들어간다.

        2) like_feature의 내용이 master에서 업데이트 된 내용이기 때문에 곧바로 merge된다. 이러한 merge 방식을 fast forward라고 한다.
            (master branch에서 수정된 내용없이, 추가된 like_feature만 병합하는 경우라면 바로 merge된다는 말이다.)

    (2) fast forward가 아닌 갈라지는 branch 병합
    
        1)  각각의 Branch의 working directory에서 같은 파일의 내용을 다르게 수정
            1-1) 마찬가지로 master로 이동하여 like_feature를 병합하기
            1-2) $git branch --merged : 병합된 branch 확인
            1-3) $git branch -d [branch name] : branch 삭제

--------------------------------------------------------------------------------------------------------------------------------------

4. conflict 해결 : Merge한 두 Branch에서 같은 파일을 변경했을 때 충돌한다.

    (1) 사용자가 직접 결정을 해야한다.
        1) 오류내용
            $ git merge like_feature
            Auto-merging comment.js
            CONFLICT (content): Merge conflict in comment.js
            Automatic merge failed; fix conflicts and then commit the result.

        2) git status로 conlict 확인 : 어떤 파일에 both modified 오류가 발생했는지 확인한다.
            수정 완료 후 git add, merge 진행

    (2) 충돌 방지 : master branch를 자주 pull하여 충돌이 일어나는 것을 방지

        1) master branch는 배포가 가능한 수준의 안정적인 부분이기 때문에, 애초에 변화가 적어야한다.


--------------------------------------------------------------------------------------------------------------------------------------
