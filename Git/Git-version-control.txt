1. Git Branch : 독립적으로 어떤 작업을 진행하기 위한 개념, 각각의 Branch는 다른 Branch의 영향을 받지 않음

    (1) Git Branch 종류

        1) main Branch : 배포할 수 있는 수준의 안정적인 Branch

        2) topic Branch : 기능 추가나 버그 수정과 같은 단위 작업을 위한 Branch

    (2) Branch 생성 : $git branch [branch id]

        1) master branch : 기본 branch
    
    (3) Branch 전환

        1) 현재 branch 확인 : $git branch

        2) checkout [branch id] : HEAD가 해당 branch로 이동한다.

        3) Git Navigation : checkout은 branch를 전환하는데 사용할 수 도 있고 
                            아래와 같이 git log 로 확인한 snapshot을 넘나들때도 사용이 가능
                            git checkout [snapshot hash(16진수)]

                            $ git log --pretty=oneline
                            e4abb6f... (HEAD -> master) this is master
                            d97d387... another snapshot
                            $ git checkout d97d38
                            ...
                            HEAD is now at d97d38 another snapshot
                            $ git log --pretty=oneline
                            e4abb6f... (master) this is master
                            d97d387... (HEAD) another snapshot
                            이렇게 snapshot의 hash값을 이용하여 과거의 파일 내용을 확인 할 수 있다.

--------------------------------------------------------------------------------------------------------------------------------------

2. fast forward

    (1) like_feature(예) Branch의 working directory에서 새로운 정보를 넣어 commit

        1) git checkout like_feature로 branch를 이동하고 새로운 commit을 진행하면 HEAD->like_feature가 master와 다른 체크포인트를 만든다.

--------------------------------------------------------------------------------------------------------------------------------------

3. Merge(병합) : like_feature에서 작업을 마친후 master branch로 통합하기

    (1) master로 이동하여 like_feature를 병합하기(fast forward의 경우)
    
        1) master를 중심으로 병합된다. like_feature의 내용이 이동한 master 내부로 모두 들어간다.

        2) like_feature의 내용이 master에서 업데이트 된 내용이기 때문에 곧바로 merge된다. 이러한 merge 방식을 fast forward라고 한다.
            (master branch에서 수정된 내용없이, 추가된 like_feature만 병합하는 경우라면 바로 merge된다는 말이다.)

    (2) fast forward가 아닌 갈라지는 branch 병합
    
        1)  각각의 Branch의 working directory에서 같은 파일의 내용을 다르게 수정
            1-1) 마찬가지로 master로 이동하여 like_feature를 병합하기
            1-2) $git branch --merged : 병합된 branch 확인
            1-3) $git branch -d [branch name] : branch 삭제

--------------------------------------------------------------------------------------------------------------------------------------

4. conflict 해결 : Merge한 두 Branch에서 같은 파일을 변경했을 때 충돌한다.

    (1) 사용자가 직접 결정을 해야한다.
        1) 오류내용
            $ git merge like_feature
            Auto-merging comment.js
            CONFLICT (content): Merge conflict in comment.js
            Automatic merge failed; fix conflicts and then commit the result.

        2) git status로 conlict 확인 : 어떤 파일에 both modified 오류가 발생했는지 확인한다.
            수정 완료 후 git add, merge 진행

    (2) 충돌 방지 : master branch를 자주 pull하여 충돌이 일어나는 것을 방지

        1) master branch는 배포가 가능한 수준의 안정적인 부분이기 때문에, 애초에 변화가 적어야한다.


--------------------------------------------------------------------------------------------------------------------------------------

5. Git 심화정보

    (1) Index : git add로 Staging 되어있는 데이터들

    (2) HEAD : 마지막 커밋을 가리키는 snapshot

        1) HEAD 역시 snapshot이며 후에 배울 branch에서 현재 우리가 위치해있는 branch를 가리키는 포인터의 역할을 수행

        2) HEAD를 이용한 버전 관리 
            2-1) git reset --<option> HEAD~ : HEAD를 전의 snapshot으로 이동시킬 수 있다.

            2-2) git reset --soft HEAD~ : 예전 버전으로 돌아가 commit을 수정할 수 있다.(Default)
                $git log --pretty=oneline
                eba263 (HEAD->master) add changed3c3d init commit
                $git reset --soft HEAD~
                $git log --pretty=oneline
                d3c3d (HEAD->master) init commit
                $git commit -m “modified message”
                $git log --pretty=oneline39ae2 (HEAD->master) modifies me..
                d3c3d init commit

            2-3) git reset --hard HEAD~ : working directory에 존재하는 파일도 사라진다.

    (3) snapshot : staging 되어진 데이터들(Index)을 commit 명령으로 영구히 저장한 것

    (4) rebase : 브랜치가 너무 많아져서 history 정리가 필요한 상황에 사용

        1) 그래프를 선형으로 만든다

        2) 공통된 부모까지의 commit을 가져와 원하는 브랜치 옆에 이어붙인다.

    (5) rebase conflict 해결하기 : merge와 마찬가지로 rebase 과정 중에서도 충돌이 발생할 수 있다.

        1) 오류예시

            $git status
            rebase in progress; onto1522887
            You are currently rebasing branch 'cat' on '1522887'.
                (fix conflicts and then run "git rebase --continue")
                (use "git rebase --abort" to check out the original branch)
            Unmerged paths:
                (use "git restore --staged <file>..." to unstage)
                (use "git add <file>..." to mark resolution)
                    both modified:   client_file
            no changes added to commit (use "git add" and/or "git commit -a")

        2) 해결방법 

            2-1) client_file에서 발생한 충돌을 해결하고 git add 명령을 수행해서 client_file을 staging 해준다.

            2-2) staging 되었다면 이를 git rebase --continue를 이용해서 rebase를 마무리한다.

            2-3) 후에 master를 cat으로 merge뿐만 아니라 rebase로도 fast-forward 시켜줄 수 있다.

        3) 결론 : git rebase master란?
            3-1) 현재 위치해 있는 브랜치의 commit부터 master의 공통된 부모 전까지의 commit을 master옆에 이어붙인다는 의미

    (6) 저장소 동기화 파헤치기

        1) 로컬 저장소와 원격 저장소를 서로 동기화 시키기 위해서는 아래의 2개의 과정을 거쳐야한다.

            1-1) remote저장소의 이름을 지정해준다
                git remote add origin https://github.com/group/project
                
            1-2) 트래킹 브랜치를 설정해서 push 또는 pull을 한다
                git pull origin master
                git push --set-upstream origin master

        2) 그냥 git pull, git push를 하면 안되는걸까?

            2-1) 최초로 원격 저장소를 pull하게 되면 다음과 같은 메시지를 볼 수 있다.
                $ git pull
                There is no tracking information for the current branch.
                Please specify which branch you want to merge with.
                See git-pull(1) for details.
                    git pull <remote> <branch>
                If you wish to set tracking information for this branch you can do so with:
                    git branch --set-upstream-to=origin/<branch> master

            2-2) 최초로 원격저장소를 push하게 되면 다음과 같은 메시지를 볼 수 있다.
                $ git push
                fatal: The current branch master has no upstream branch.
                To push the current branch and set the remote as upstream, use
                    git push --set-upstream origin master

        3) --set-upstream 

            앞에서 다룬 메시지는 원격저장소에 위치한 브랜치를 추적하기 위한 로컬 저장소의 브랜치가 정해지지 않았다는 의미

        4) pull 파헤치기(git pull first dog)
            
            4-1) pull 옆에 우리가 받아오고자 하는 원격 저장소의 이름과 원격 저장소에서 받아오고자 하는 브랜치의 이름을 적는다.

            4-2) pull 을 했을 때 다음과 같이 트래킹 브랜치가 생성되며 원격 저장소에서의 dog 브랜치가 위치한 위치를 보여준다.
                    first 원격 저장소 : c1-c2(master)-c3(dog)
                    지역 저장소 : c1-c2-c3(HEAD -> master, first/dog)

            4-3) 트래킹 브랜치가 생성되었지만 로컬저장소에서 트래킹 브랜치와 연결된 브랜치가 존재하지 않는다.

            4-4) cat이라는 브랜치를 만들고 아래의 명령으로 트래킹 브랜치와 연결시키기
                    git branch --set-upstream-to=first/dog cat

            4-5) 만약 원격저장소의 dog 브랜치에 새로운 commit이 올라오게 되더라도 cat 브랜치에서 git pull을 실행하면
                트래킹 브랜치가 위치해 있는 곳까지 fast-forward가 이루어집니다

        5) push 파헤치기(git push origin master)

            5-1) git clone 명령어로 저장소를 복사해온 것이 아니면 처음 push 할 때 실제로는 git push origin master 명령 사용
                push 옆에 데이터를 전송하고자 하는 원격저장소와 push하기 희망하는 로컬저장소의 브랜치 이름을 적어준다.

            5-2) remote 등록 (git remote add second https://github.com/group/project2)

            5-3) second 원격저장소는 현재 비어있는 상태 입니다. git remote second cat 명령으로 push를 진행

            5-4) cat 브랜치 까지의 내용이 second 저장소로 push 된다.

            5-5) 아직 로컬저장소의 cat 브랜치가 원격저장소의 cat 브랜치와 트래킹 되지 않은 상태이다.

            5-6) 로컬과 원격 브랜치가 아직 서로 연결이 안되어 있기 때문에 바로 git push second로 명령어를 사용할 수 없다.

            5-7) cat 브랜치를 트래킹 해주기 위해서 아래 명령어를 사용
                git branch –set-upstream-to=second/cat cat

            5-8) 또는 아래와 같이 push와 동시에 트래킹을 설정할 수 있습니다
                git push --set-upstream second cat

        6) 결론
            
            6-1) 트래킹 브랜치는 저장소에 존재하는 특정 브랜치의 위치를 알려줍니다.
            
            6-2)트래킹 브랜치의 정보를 이용해서 내가 원하는 브랜치와 서로 트래킹을 시켜주고 지속적으로 관리할 수 있습니다

--------------------------------------------------------------------------------------------------------------------------------------

7. 동기화와 관련된 오류

    (1) pull 오류

        1) pull을 했을 때 받아온 저장소의 파일이 디렉토리 내의 untracked 파일(working directory) 중 같은 이름을 가질 때 발생하는 오류

        $ git pull
        error: The following untracked working tree files would be overwritten by merge:
            <file_name>
        Please move or remove them before you merge.
        Aborting

            1-1) 충돌되는 파일을 삭제 또는 다른 임시 디렉토리로 이동시킨다.
            1-2) 워킹 디렉토리를 초기화 시킨다
            1-3) git clean -f -d -x : git이 추적 중이지 않은 워킹 디렉토리에 존재하는 파일들과 
                                        .gitignore로 git의 관리를 받지 않는 파일들까지 모두 깨끗하게 지워버리는 명령어
                오류가 발생되는 파일이 한 두개 라면 충돌되는 파일을 다른 디렉토리로 이동시키면 된다.
                그러나, 충돌이 발생되는 파일이 너무 많아 일일이 이동시킬 수 없을 경우가 발생할 수 있다.
                따라서 수정 중이던 내용 중 필요한 부분이 있다면 커밋으로 수정된 상태를 저장하거나
                아예 수정하고 있는 파일을 다른 디렉토리에 옮겨 저장하는 것이 pull 오류를 해결하는 가장 확실한 방법

        2) pull을 했을 때 받아온 저장소의 파일이 로컬 git 저장소에서 수정된 파일(staging area)과 같은 이름을 가질 때 발생하는 오류

        $ git pull
        error: Your local changes to the following files would be overwritten by merge:
            <file_name>
        Please move or remove them before you merge.
        Aborting

            2-1) git stash를 사용하여 작업한 내용을 커밋하지 않고 임시저장 한다.
            2-2) 충돌되는 파일을 삭제 또는 다른 임시 디렉토리로 이동시킨다.
            2-3) git stash : 내용을 임시저장(작업된 내용이 아직 커밋되지 않고 있다고 가정)
                $ git stash
                Saved working directory and index state
                    "WIP on master: 049d078 added the index file"
                HEAD is now at 049d078 added the index file
                (To restore them type "git stash apply")
            2-4) working directory가 비워진 것을 확인 할 수 있다.
                $ git status
                On branch master
                nothing to commit, working directory clean
            2-5) git stash list로 임시저장한 내역을 확인 할 수 있다.
                $ git status list
                stash@{0}: WIP on master: 049d078 added the index file
            2-6) pull을 완료하고 git stash apply로 가장 최근에 저장한 stash를 불러 올 수 있습니다
            2-7) 주의점 : stash는 staging되었던 상태의 파일들을 불러올 때 다시 staging시켜 주지 않는다.
                    staging을 유지시켜 주기 위해서는 --index 옵션을 주면 된다.

    (2) 로그인 오류

        1) push/pull 명령어 사용시 패스워드를 잘못 입력하였을 때, git이 패스워드를 다시 묻지 않고 Authenticate 오류를 발생시키는 경우
            $ git push (or) $ git pull
            remote: Invalid username or password.
            fatal: Authentication failed for 'https://git@gitlab.com/…

        2) GCM(git credential manager)
            2-1) 보통 http는 ssh의 인증방식과 다르게 한 번 git 웹 호스팅 서비스에 등록을 하면 자동으로 인증되는 방식이 아니라
                매번 원격저장소에 접근 시 아이디와 패스워드를 입력해 줘야하는 단점이 있다.

            2-2) credential 저장소는 이러한 인증정보를 저장해두고 자동으로 입력해주는 시스템이다.
                이때 잘못된 패스워드를 자동으로 git이 입력하기 때문에 앞선 오류가 발생하게 된다.

            2-3) 잘못 지정한 인증정보 초기화 명령어
                git config --system --unset credential.helper

--------------------------------------------------------------------------------------------------------------------------------------

8. 트래킹 브랜치

    (1) origin/master
    
        1) 원격저장소 역시 git 저장소이다. 다만, working directory가 존재하지 않으며 이를 bare 저장소라고 부른다.

        2) Git fetch 또는 git pull 을 이용해서 원격저장소를 동기화 하게 되면 origin/master 브랜치가 생긴다.
            이 브랜치를 트래킹 브랜치라고 부른다.

        3) 트래킹 브랜치는 원격저장소의 브랜치가 어디에 위치하는지를 보여준다.

        4) 트래킹 브랜치
            4-1) 브랜치이지만 checkout 할 수 없다.
            4-2) 가리키고 있는 commit의 위치를 강제로 변경할 수 없다.
            4-3) git merge origin/master로 merge가 가능하다.
    
