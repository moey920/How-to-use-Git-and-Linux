1. 프로세스 : 메모리에 적재되어 실행되고 있는 모든 프로그램이 프로세스

    (1) 프로그램 : 코드(명령어)의 집합체

    (2) 프로세스 : 실행되고 있는 프로그램

    (3) 프로세스가 한 프로그램 안에서 여러개 생성되면 '멀티 프로세싱'

    (4) 프로세스 특징
        4-1)모든 프로그램은 실행될 때 하나 이상의 프로세스를 갖는다.
        4-2)병행적으로 실행이 가능하다.
        4-3)부모, 자식 프로세스가 있게 된다.(fork)
        4-4)커널에 의해 관리된다.
        4-5)모든 프로세스에는 소유자가 있다.
        4-6)프로세스마다 식별을 위한 ID가 부여된다.(PID)

    (5) PID :
        5-1) 모든 프로세스는 고유한 번호(PID)를 가지고 있다.
        5-2) PID 1번은 init 프로세스, 2번은 kthreadd 프로세스가 실행
        5-3) init 프로세스는 나머지 모든 시스템 프로세스의 부모 프로세스
        5-4) thread 프로세스는 모든 스레드의 부모 프로세스

    (6) 프로세스의 메모리 구성
        상단
        6-1) 코드 영역
            • 프로그램 코드를 뜻함 : 코드 자체를 구성하는 메모리의 영역으로 하위 메모리부터 할당된다.
        6-2) 데이터 영역
            • 전역 변수와 정적 변수
        6-3) BSS 영역
            • 초기화되지 않은 변수(프로그램 종료시 반환됌)
        6-4) 힙 영역
            • 동적인 메모리 할당영역(해제하면 사라짐)
        6-5) 스택 영역
            • 함수 매개변수, 복귀 주소, 지역 변수와 같은 임시 자료(임시 메모리 영역, 함수 호출 시 생성되며 종료시 사라짐, LIFO)
        6-6) 커널
        하단

--------------------------------------------------------------------------------------------------------------------------------------

2. 프로세스 명령어

    (1) ps : 프로세스 목록 보기
        ps [option]
        * option
            -e : 현재 실행 중인 모든 프로세스 정보 출력
            -f : 모든 정보 확인
            -a : 실행중인 전체 사용자의 모든 프로세스 출력
            -u : 프로세스를 실행한 사용자와 프로세스 시작 시간 등을 출력
            -x : 터미널 제어 없이 프로세스 현황 보기

    (2) ps 세부요소
        1) UID : User의 고유 ID
        2) PID : 프로세스 ID
        3) PPID : 부모 프로세스의 ID
        4) STIME : start time, 프로세스가 시작된 시간(월:일, 시:분:초)
        5) TTY(TeleTYpe) : 프로세스가 실행되고 있는 터미널
        6) TIME : 프로세스가 cpu를 사용한 시간(생성되고 지난 시간)
        7) CMD : 프로세스의 이름

    (3) ps -aux : 시스템에서 실행중인 모든 프로세스를 실시간으로 출력

    (4) kill : 프로세스 종료
        kill [option] [PID:프로세스 아이디]
        * option
            -l : 사용 가능한 시그널 목록을 출력
            
            자주 사용하는 시그널
            -1 : 재실행(SIGHUP)
            -9 : 강제종료(SIGKILL)
            -15 : 정상 종료(SIGTERM)

--------------------------------------------------------------------------------------------------------------------------------------

3. job : 백그라운드로 실행되는 작업을 보여주는 명령어 

    (1) background, foreground : 명령어 뒤에 &를 붙이면 background에서 명령이 실행된다. 
        job을 활용하여 프로세스를 더 효율적으로 관리할 수 있다

    (2) job은 프로세스와 달리 터미널 명령을 통한 작업만을 의미
        
    (3) job을 통해 프로세스를 실행할 수 있지만 터미널이 종료되면 job과 함께 프로세스도 종료
        
    (4) 각각의 터미널마다 job은 따로 존재

    (5) kill %작업번호 : 삭제
        프로세스와 마찬가지로 kill 명령어를 통해 종료 가능, ps 명령어를 통해 PID를 알아내어 종료하는 방법도 가능
--------------------------------------------------------------------------------------------------------------------------------------

4. at와 cron
    (1) at : 지정된 시간에 1회 실행되는 작업 예약 명령어, 시간이 되면 수행되고 작업 리스트에서 사라진다.

        1) at [옵션] [시간] [날짜] [+증가시간]
            * option
                -m : 출력 결과가 없더라도 작업이 완료될 때 사용자에게 메일을 보냄(출력결과물)
                -f : 스크립트 파일 등을 실행할 때 사용(스크립트 파일 명시)
                -l : 예약된 작업 목록 출력, atq 명령어 또한 같은 동작을 수행
                -v : 작업이 수행될 시간 출력(예약된 시간)
                -d : 예약된 작업을 삭제, atrm 명령어 또한 같은 동작을 수행

        2) atq : 예약된 작업 목록 출력
        3) atrm : 예약작업 삭제
        4) 사용예시 : at now + 3 hours -f elice.sh (지금으로부터 3시간 후에 elice.sh 스크립트를 실행)

    (2) crontab : 지정된 시간에 1회 실행되는 at과는 달리, 지정된 시간에 따라 주기적으로 실행

        1) crontab [옵션]
            * option
                -l : 현재 계정의 설정된 crontab 정보를 보여준다
                -e : 현재 계정의 crontab 정보를 수정한다.
                -r : 현재 계정의 crontab 정보를 모두 삭제한다.
                -u : 특정 사용자의 crontab 정보를 다루게 해준다.(root 권한 필요)

        2) crontab 등록 형식
            2-1) 분(0~59) 시(0~23) 일(1~31) 월(1~12) 요일(0~6) 수행할 명령어
            2-2) 요일의 경우 0 : 일요일, 1 : 월요일, … , 6:토요일의 형식으로 사용 

--------------------------------------------------------------------------------------------------------------------------------------

5. SSH : 리눅스 터미널 원격 접속

    (1) Secure Shell의 줄임말로 네트워크를 통해 다른 컴퓨터에 접근하거나 그 컴퓨터에서 명령 실행 등을 할 수 있도록 해주는 프로토콜
        즉, SSH를 통해 다른 컴퓨터에서 리눅스에 접속하여 명령어 및 프로그램을 실행할 수 있다
    
    (2) Telnet과 SSH :
        1) Telnet 또한 네트워크를 통해 다른 컴퓨터에 접근하거나 그 컴퓨터에서 명령 실행 등을 할 수 있도록 해주는 프로토콜
        하지만 보안적으로 매우 치명적인 결함 존재

        2) Telnet을 통해 보내지는 패킷 데이터는 암호화 되어 있지 않다. 
            즉, 이를 통해 사용자의 비밀번호 등의 노출 되어서는 안되는 데이터가 노출 된다. 하지만 SSH의 데이터는 암호화 되어 있다.
        
    (3) openssh
        1) 우분투에서는 openssh 라는 패키지를 통해 SSH를 구동할 수 있다.
        2) 우분투를 설치하고 나면, openssh-client만이 기본적으로 설치 되어 있다.
        3) 다른 컴퓨터에서 우분투에 접속하려면 openssh-server 패키지를 설치해야 한다.
        4) dpkg -l | grep openssh, sudo apt install openssh (설치)
        5) sudo service ssh start, service --status-all | grep + (실행)
        6) sudo netstat -antp (포트 확인)

    (4) SSH 접속하기
        1) ssh [서버아이디]@[아이피 혹은 서버이름 혹은 도메인]
        2) CMD 또는 터미널 창에서 다음의 명령어로 접속 가능, OpenSSH Clinet가 설치되어 있어야 한다.
--------------------------------------------------------------------------------------------------------------------------------------
